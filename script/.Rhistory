#try to predict it
foreca.error <- compute(nn,stockscaled[60, -s])$net.result
#NN part
#get out the first error element
errortrim <- error[-c(1)]
View(errortrim)
names(nn)
#main script
#this script builds the arima models for a random stock in the portfolio
#and
#create a NN fed by the prices of the stock bucket to predict t+1 errror
library(forecast)
library(tseries)
library(neuralnet)
#set seed and choose a random stock to give into the ARIMA process
set.seed(60)
s <- sample(1:31, 1)
#get the stock value
stock <- read.table("stock.csv", dec = ",", sep = ";", header = 1)
#get training set
train <- ts(stock[1:60,s])
#fit model
fit <- auto.arima(train)
#get fitting error
error <- train * 0
error <- fit$fitted - train
error[-c(1)]
#NN part
#get out the first error element
error.trim <- error[-c(1)]
length(train)
train[-c(length(train)),]
train.trim <- train[-c(length(train))]
train[-c(length(train))]
train[-c(length(train)),]
train[,-c(length(train))]
train
stock <- stock[1:60,]
stock <- stock[1:60,]
stock[-c(length(train)),]
stock.trim <- stock[-c(length(train)),]
#get a normalized dataframe of the stock price
scaled <-as.data.frame(scale(stock.trim))
names(scaled)[s] <- paste(names(train[s]), "error", sep = "")
stock.trim[s] <- as.numeric(as.character(unlist(error.trim)))
n <- names(stock.trim)
#try to train a nnet on the stock's error using the prices of the other equity
y <- paste(n[s], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[s]], collapse = " + ")))
View(stock.trim)
scaled[s] <- as.numeric(as.character(unlist(error.trim)))
View(scaled)
#get a normalized dataframe of the stock price
scaled <-as.data.frame(scale(stock.trim))
scaled[s] <- as.numeric(as.character(unlist(error.trim)))
View(scaled)
View(stock.trim)
error
n <- names(scaled)
#try to train a nnet on the stock's error using the prices of the other equity
y <- paste(n[s], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[s]], collapse = " + ")))
nn <- neuralnet(f,data=scaled,hidden=c(16),linear.output=T)
plot(nn)
nn <- neuralnet(f,data=scaled,hidden=c(20),linear.output=T)
#try to predict it
foreca.nn <- compute(nn,stockscaled[59, -s])$net.result
error
#try to predict it
foreca.nn <- compute(nn,stockscaled[58, -s])$net.result
nn <- neuralnet(f,data=scaled,hidden=c(15),linear.output=T)
#try to predict it
foreca.nn <- compute(nn,stockscaled[58, -s])$net.result
nn <- neuralnet(f,data=scaled,hidden=c(20),linear.output=T)
#try to predict it
foreca.nn <- compute(nn,scaled[58, -s])$net.result
#try to predict it
foreca.nn <- compute(nn,scaled[59, -s])$net.result
print("ciao")
starting a loop that will loop 30 times
for (i in 1:30){
print("ciao")
}
i <- 1
#starting a loop that will loop 30 times
for (i in 1:30){
print(i)
#get training set
train <- ts(stock[i:(i+60),s])
#fit model
fit <- auto.arima(train)
#get fitting error
error <- train * 0
error <- fit$fitted - train
}
#starting a loop that will loop 30 times
for (i in 1:30){
print(i)
stock <- stockfull[i:(i+60),]
#get training set
train <- ts(stock[,s])
#fit model
fit <- auto.arima(train)
#get fitting error
error <- train * 0
error <- fit$fitted - train
}
#set seed and choose a random stock to give into the ARIMA process
set.seed(60)
s <- sample(1:31, 1)
#Start from the  first sixty data points
stockfull <- read.table("stock.csv", dec = ",", sep = ";", header = 1)
i <- 1
#starting a loop that will loop 30 times
for (i in 1:30){
print(i)
stock <- stockfull[i:(i+60),]
#get training set
train <- ts(stock[,s])
#fit model
fit <- auto.arima(train)
#get fitting error
error <- train * 0
error <- fit$fitted - train
}
autoplot(fit)
library(ggplot2)
autoplot(fit)
View(fit)
plot(fit)
library(forecast)
library(tseries)
library(neuralnet)
#set seed and choose a random stock to give into the ARIMA process
set.seed(60)
s <- sample(1:31, 1)
#Start from the  first sixty data points
stockfull <- read.table("stock.csv", dec = ",", sep = ";", header = 1)
i <- 1
stock <- stockfull[i:(i+60),]
#get training set
train <- ts(stock[,s])
#fit model
fit <- auto.arima(train)
#get fitting error
error <- train * 0
error <- fit$fitted - train
autoplot(fit)
autoplot(fit$fitted)
autoplot(fit$series)
library(ggfortify)
autoplot(fit)
#try to predict it
foreca <- forecast(fit, h=1)
autoplot(foreca)
foreca$x
foreca$mean
autoplot(foreca)
autoplot(fitted
)
autoplot(fit)
stock <- stockfull[i:(i+59),]
#get training set
train <- ts(stock[,s])
#fit model
fit <- auto.arima(train)
#get fitting error
error <- train * 0
error <- fit$fitted - train
autoplot fit
autoplot(fit)
#try to predict it
foreca <- forecast(fit, h = 1)
autoplot(foreca)
foreca$x
foreca$mean
as.numeric(foreca$mean)
(compute(nn,scaled[60, -s])$net.result) + as.numeric(foreca$mean)
#NN part
#get out the first error element a last element of train
error.trim <- error[-c(1)]
stock.trim <- stock[-c(length(train)),]
#get a normalized dataframe of the stock price
scaled <-as.data.frame(scale(stock.trim))
scaled[s] <- as.numeric(as.character(unlist(error.trim)))
n <- names(scaled)
#try to train a nnet on the stock's error using the prices of the other equity
y <- paste(n[s], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[s]], collapse = " + ")))
nn <- neuralnet(f,data=scaled,hidden=c(20),linear.output=T)
foreca <- (compute(nn,scaled[60, -s])$net.result) + as.numeric(foreca$mean)
foreca <- as.numeric(compute(nn,scaled[60, -s])$net.result) + as.numeric(foreca$mean)
#try to predict it
foreca <- forecast(fit, h = 1)
pred <- as.numeric(compute(nn,scaled[60, -s])$net.result) + as.numeric(foreca$mean)
compute(nn,scaled[60, -s])$net.result
library(forecast)
library(tseries)
library(neuralnet)
#set seed and choose a random stock to give into the ARIMA process
set.seed(60)
s <- sample(1:31, 1)
#Start from the  first sixty data points
stockfull <- read.table("stock.csv", dec = ",", sep = ";", header = 1)
i <- 1
stock <- stockfull[i:(i+59),]
#get training set
train <- ts(stock[,s])
#fit model
fit <- auto.arima(train)
#get fitting error
error <- train * 0
error <- fit$fitted - train
#NN part
#get out the first error element a last element of train
error.trim <- error[-c(1)]
stock.trim <- stock[-c(length(train)),]
#get a normalized dataframe of the stock price
scaled <-as.data.frame(scale(stock.trim))
scaled[s] <- as.numeric(as.character(unlist(error.trim)))
n <- names(scaled)
#try to train a nnet on the stock's error using the prices of the other equity
y <- paste(n[s], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[s]], collapse = " + ")))
nn <- neuralnet(f,data=scaled,hidden=c(20),linear.output=T)
#try to predict it
foreca <- forecast(fit, h = 1)
pred <- as.numeric(compute(nn,scaled[60, -s])$net.result) + as.numeric(foreca$mean)
print(i)
stock <- stockfull[i:(i+59),]
#get training set
train <- ts(stock[,s])
#fit model
fit <- auto.arima(train)
#get fitting error
error <- train * 0
error <- fit$fitted - train
#NN part
#get out the first error element a last element of train
error.trim <- error[-c(1)]
stock.trim <- stock[-c(length(train)),]
#get a normalized dataframe of the stock price
scaled <-as.data.frame(scale(stock))
scaled.trim <-as.data.frame(scale(stock.trim))
scaled[s] <- as.numeric(as.character(unlist(error.trim)))
n <- names(scaled)
#try to train a nnet on the stock's error using the prices of the other equity
y <- paste(n[s], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[s]], collapse = " + ")))
nn <- neuralnet(f,data=scaled,hidden=c(20),linear.output=T)
print(i)
stock <- stockfull[i:(i+59),]
#get training set
train <- ts(stock[,s])
#fit model
fit <- auto.arima(train)
#get fitting error
error <- train * 0
error <- fit$fitted - train
#NN part
#get out the first error element a last element of train
error.trim <- error[-c(1)]
stock.trim <- stock[-c(length(train)),]
#get a normalized dataframe of the stock price
scaled <-as.data.frame(scale(stock))
scaled.trim <-as.data.frame(scale(stock.trim))
scaled.trim[s] <- as.numeric(as.character(unlist(error.trim)))
n <- names(scaled)
#try to train a nnet on the stock's error using the prices of the other equity
y <- paste(n[s], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[s]], collapse = " + ")))
nn <- neuralnet(f,data=scaled,hidden=c(20),linear.output=T)
#try to predict it
foreca <- forecast(fit, h = 1)
print(i)
stock <- stockfull[i:(i+59),]
#get training set
train <- ts(stock[,s])
#fit model
fit <- auto.arima(train)
#get fitting error
error <- train * 0
error <- fit$fitted - train
#NN part
#get out the first error element a last element of train
error.trim <- error[-c(1)]
stock.trim <- stock[-c(length(train)),]
#get a normalized dataframe of the stock price
scaled <-as.data.frame(scale(stock))
scaled.trim <-as.data.frame(scale(stock.trim))
scaled.trim[s] <- as.numeric(as.character(unlist(error.trim)))
n <- names(scaled)
#try to train a nnet on the stock's error using the prices of the other equity
y <- paste(n[s], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[s]], collapse = " + ")))
nn <- neuralnet(f,data=scaled.trim,hidden=c(20),linear.output=T)
#try to predict it
foreca <- forecast(fit, h = 1)
pred <- as.numeric(compute(nn,scaled[60, -s])$net.result) + as.numeric(foreca$mean)
foreca$mean
compute(nn,scaled[60, -s])$net.result
nn <- neuralnet(f,data=scaled.trim,hidden=c(15),linear.output=T)
pred <- as.numeric(compute(nn,scaled[60, -s])$net.result) + as.numeric(foreca$mean)
nn <- neuralnet(f,data=scaled.trim,hidden=c(17),linear.output=T)
pred <- as.numeric(compute(nn,scaled[60, -s])$net.result) + as.numeric(foreca$mean)
nn <- neuralnet(f,data=scaled.trim,hidden=c(18),linear.output=T)
pred <- as.numeric(compute(nn,scaled[60, -s])$net.result) + as.numeric(foreca$mean)
nn <- neuralnet(f,data=scaled.trim,hidden=c(20),linear.output=T)
pred <- as.numeric(compute(nn,scaled[60, -s])$net.result) + as.numeric(foreca$mean)
nn <- neuralnet(f,data=scaled.trim,hidden=c(19),linear.output=T)
pred <- as.numeric(compute(nn,scaled[60, -s])$net.result) + as.numeric(foreca$mean)
nn <- neuralnet(f,data=scaled.trim,hidden=c(20),linear.output=T)
#main script
#this script builds the arima models for a random stock in the portfolio
#and
#create a NN fed by the prices of the stock bucket to predict t+1 errror
library(forecast)
library(tseries)
library(neuralnet)
#set seed and choose a random stock to give into the ARIMA process
set.seed(60)
s <- sample(1:31, 1)
#Start from the  first sixty data points
stockfull <- read.table("stock.csv", dec = ",", sep = ";", header = 1)
i <- 1
#starting a loop that will loop 30 times
for (i in 1:30){
print(i)
stock <- stockfull[i:(i+59),]
#get training set
train <- ts(stock[,s])
#fit model
fit <- auto.arima(train)
#get fitting error
error <- train * 0
error <- fit$fitted - train
#NN part
#get out the first error element a last element of train
error.trim <- error[-c(1)]
stock.trim <- stock[-c(length(train)),]
#get a normalized dataframe of the stock price
scaled <-as.data.frame(scale(stock))
scaled.trim <-as.data.frame(scale(stock.trim))
scaled.trim[s] <- as.numeric(as.character(unlist(error.trim)))
n <- names(scaled)
#try to train a nnet on the stock's error using the prices of the other equity
y <- paste(n[s], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[s]], collapse = " + ")))
nn <- neuralnet(f,data=scaled.trim,hidden=c(20),linear.output=T)
#try to predict it
foreca <- forecast(fit, h = 1)
pred [i] <- as.numeric(compute(nn,scaled[60, -s])$net.result) + as.numeric(foreca$mean)
}
#convert it to a strategy
print(pred)
#add the naive strategy
naive <- sample(c(0,1), replace=TRUE, size=length(strategy))
print(i)
stock <- stockfull[i:(i+59),]
#get training set
train <- ts(stock[,s])
#fit model
fit <- auto.arima(train)
#get fitting error
error <- train * 0
error <- fit$fitted - train
#NN part
#get out the first error element a last element of train
error.trim <- error[-c(1)]
stock.trim <- stock[-c(length(train)),]
#get a normalized dataframe of the stock price
scaled <-as.data.frame(scale(stock))
scaled.trim <-as.data.frame(scale(stock.trim))
scaled.trim[s] <- as.numeric(as.character(unlist(error.trim)))
n <- names(scaled)
#try to train a nnet on the stock's error using the prices of the other equity
y <- paste(n[s], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[s]], collapse = " + ")))
nn <- neuralnet(f,data=scaled.trim,hidden=c(20),linear.output=T)
#adjust ARIMA prediction
foreca <- forecast(fit, h = 1)
pred [i] <- as.numeric(compute(nn,scaled[60, -s])$net.result) + as.numeric(foreca$mean)
pred[i]
pred[i]
#starting a loop that will loop 30 times
for (i in 1:30){
print(i)
stock <- stockfull[i:(i+59),]
#get training set
train <- ts(stock[,s])
#fit model
fit <- auto.arima(train)
#get fitting error
error <- train * 0
error <- fit$fitted - train
#NN part
#get out the first error element a last element of train
error.trim <- error[-c(1)]
stock.trim <- stock[-c(length(train)),]
#get a normalized dataframe of the stock price
scaled <-as.data.frame(scale(stock))
scaled.trim <-as.data.frame(scale(stock.trim))
scaled.trim[s] <- as.numeric(as.character(unlist(error.trim)))
n <- names(scaled)
#try to train a nnet on the stock's error using the prices of the other equity
y <- paste(n[s], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[s]], collapse = " + ")))
nn <- neuralnet(f,data=scaled.trim,hidden=c(20),linear.output=T)
#adjust ARIMA prediction
foreca <- forecast(fit, h = 1)
pred [i] <- as.numeric(compute(nn,scaled[60, -s])$net.result) + as.numeric(foreca$mean)
}
#convert it to a strategy
print(pred)
#convert it to a strategy
plot(pred)
#add the naive strategy
naive <- sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
sample(c(0,1), replace=TRUE, size=1)
signal.model <- 1
if (pred > stock[60,s]){
signal.model <- 1
}
signal.naive <- sample(c(0,1), replace=TRUE, size=1)
stock[60,s]
if (pred > stock[60,s]){
signal.model <- 1
}
pred
pred <- as.numeric(compute(nn,scaled[60, -s])$net.result) + as.numeric(foreca$mean)
if (pred > stock[60,s]){
signal.model <- 1
}
signal.naive <- sample(c(0,1), replace=TRUE, size=1)
signal.model <- 0
if (pred > stock[60,s]){
signal.model <- 1
}
signal.naive <- sample(c(0,1), replace=TRUE, size=1)
signal.naive <- sample(c(0,1), replace=TRUE, size=1)
#starting a loop that will loop 30 times
for (i in 1:30){
print(i)
stock <- stockfull[i:(i+59),]
#get training set
train <- ts(stock[,s])
#fit model
fit <- auto.arima(train)
#get fitting error
error <- train * 0
error <- fit$fitted - train
#NN part
#get out the first error element a last element of train
error.trim <- error[-c(1)]
stock.trim <- stock[-c(length(train)),]
#get a normalized dataframe of the stock price
scaled <-as.data.frame(scale(stock))
scaled.trim <-as.data.frame(scale(stock.trim))
scaled.trim[s] <- as.numeric(as.character(unlist(error.trim)))
n <- names(scaled)
#try to train a nnet on the stock's error using the prices of the other equity
y <- paste(n[s], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[s]], collapse = " + ")))
nn <- neuralnet(f,data=scaled.trim,hidden=c(20),linear.output=T)
#adjust ARIMA prediction
foreca <- forecast(fit, h = 1)
pred <- as.numeric(compute(nn,scaled[60, -s])$net.result) + as.numeric(foreca$mean)
#convert prediction to signal
signal.model <- 0
if (pred > stock[60,s]){
signal.model <- 1
}
signal.naive <- sample(c(0,1), replace=TRUE, size=1)
}
i=1
for (i in 1:100){
print(sample(c(0,1), replace=TRUE, size=1))
}
i=1
for (i in 1:100){
print(sample(c(0,1), replace=TRUE, size=1))
}
i=1
for (i in 1:100){
print(sample(c(0,1), replace=TRUE, size=1))
}
