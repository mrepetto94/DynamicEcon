ggplot(df, aes(x = factor(Destinazione_principale), y = k, fill = c("Short vacation (1-3 nights)", "Long vacation (4 or more nights)", "Work trip"))) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
coord_polar("x", start = 0) +
guides(fill = guide_legend(title = "Group")) +
labs(y="Values in thousands", x = "")
name = c("Short vacation (1-3 nights)","Long vacation (4 or more nights)","Work trip")
ggplot(df, aes(x = factor(Destinazione_principale), y = k, fill = name)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
coord_polar("x", start = 0) +
guides(fill = guide_legend(title = "Group")) +
labs(y="Values in thousands", x = "")
ggplot(df, aes(x = factor(Destinazione_principale), y = k, fill = factor(name)) +
ggplot(df, aes(x = factor(Destinazione_principale), y = k, fill = factor(name))) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
coord_polar("x", start = 0) +
guides(fill = guide_legend(title = "Group")) +
labs(y="Values in thousands", x = "")
(df["Tipo_di_viaggio"] == "tutti i tipi di viaggio") | (df["Tipo_di_viaggio"] == "viaggio di vacanza")
name = c("Short vacation (1-3 nights)","Long vacation (4 or more nights)","Work trip")
ggplot(df, aes(x = factor(Destinazione_principale), y = k, fill = factor(name))) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
coord_polar("x", start = 0) +
guides(fill = guide_legend(title = "Group")) +
labs(y="Values in thousands", x = "")
library("googlesheets")
library("ggplot2")
suppressPackageStartupMessages(library("dplyr"))
dati <- gs_title("DCCV_VIAGGI_CHARACT_CAPI")
dati <- gs_read(dati)
df <- dati[dati["Nuts_2"] != "-",]
df <- df[df["Tipo_di_viaggio"] != "tutti i tipi di viaggio", ]
df <- df[df["Tipo_di_viaggio"] != "viaggio di vacanza", ]
ggplot(df, aes(x = factor(Destinazione_principale), y = k, fill = Tipo_di_viaggio_ENG)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
coord_polar("x", start = 0) +
guides(fill = guide_legend(title = "Group")) +
labs(y="Values in thousands", x = "")
library("googlesheets")
library("ggplot2")
suppressPackageStartupMessages(library("dplyr"))
dati <- gs_title("Furti_serie_storica")
dati <- gs_read(dati)
View(dati)
library("googlesheets")
library("ggplot2")
suppressPackageStartupMessages(library("dplyr"))
dati <- gs_title("Furti_serie_storica")
dati <- gs_read(dati)
View(dati)
plot(dati)
ts.plot(dati)
library("googlesheets")
library("ggplot2")
library("tseries")
library("arima")
?autoarima
?auto.arima
library("forecast")
?auto.arima
?ts
suppressPackageStartupMessages(library("dplyr"))
dati <- gs_title("Furti_serie_storica")
dati <- gs_read(dati)
View(dati)
dati[1]
dati[1,1]
length(dati[1])
length(dati[1,])
dati <- ts(dati, start = dati[1,1], end = dati[length(dati[1,]),1])
dati <- ts(data = dati, start = dati[1,1], end = dati[length(dati[1,]),1])
datits <- ts(data = dati, start = dati[1,1], end = dati[length(dati[1,]),1], frequency = 1)
datits <- ts(dati [2:29], start = dati[1,1], end = dati[length(dati[1,]),1], frequency = 1)
datits <- ts(dati)
View(datits)
view(dati [2:29])
View(dati [2:29])
is.numeric(dati[1,1])
as.numeric(dati[1,1])
datits <- ts(dati [2:29], start = as.numeric(dati[1,1]), end = as.numeric(dati[length(dati[1,]),1]), frequency = 1)
View(datits)
datits$Piemonte
datits.Piemonte
datits["Piemonte"]
datits[1]
datits[1,]
datits[,1]
ts.plot(datits)
autoplot(datits)
View(dati)
dati[23,0]
dati[23,1]
dati[1,23]
dati[0,23]
#clean in order to take just the regions
dati <- dati[,1:23]
datits <- ts(dati [2:29], start = as.numeric(dati[1,1]), end = as.numeric(dati[length(dati[1,]),1]), frequency = 1)
datits <- ts(dati [2:23], start = as.numeric(dati[1,1]), end = as.numeric(dati[length(dati[1,]),1]), frequency = 1)
autoplot(datits)
fit <- auto.arima(datits)
fit <- apply(datits, auto.arima)
fit <- lapply(datits, auto.arima)
plot(forecast(fit,h=10))
View(fit)
foreca <- lapply(fit, forecast)
autoplot(foreca)
plot(foreca)
View(foreca)
plot(foreca[[1]])
fit <- lapply(datits, auto.arima, h=10)
fit <- lapply(datits, 10, auto.arima)
fit <- lapply(datits, h = 10, auto.arima)
plot(foreca[[1:29]])
unlist(foreca)
autoplot(foreca[[1]])
apply(foreca, autoplot)
lapply(foreca, autoplot)
install.packages("goalprog")
library("goalprog")
data( ignizio.example.3.2 )
soln <- llgp( coefficients, targets, achievements )
llgp( coefficients, targets, achievements )
View(achievements)
View(coefficients)
View(achievements)
data( ignizio.example.3.2 )
View(achievements)
View(coefficients)
View(achievements)
View(coefficients)
targets <- c(1000, 1000, 1000, 1000, 1000, 6000, 6000, 6000, 6000)
coefficients <- matrix(c(0, 0, 2.5, 0, 0, 5, 0, 3.75, 2.5, 0, 0, 0, 0, 0, 2.5, 0, 0, 5, 0, 3.75, 2.5, 0, 0, 0, 0, 0, 0, 2.5, 0, 105, 0, 3.75, 2.5, 0, 100, 0, 0, 0, 102.5, 100, 0, 0, 100, 103.75, 0, 0, 0, 0), nrow=8,ncol=6)
View(coefficients)
View(achievements)
is.data.frame(achievements)
achievents$priority
achievements$priority
View(achievements)
achievements$priority <- c(1,1,1,1,1,1,1,1)
View(achievements)
priority <- c(1,1,1,1,1,1,1,1)
objective <- c(1,1,1,1,1,1,1,1)
p <- c(1,1,1,1,1,1,1,1)
n <- c(1,1,1,1,1,1,1,1)
achievements <- data.frame(objective, priority, p, n)
View(achievements)
View(achievements)
coefficients <- matrix(c(0, 0, 2.5, 0, 0, 5, 0, 3.75, 2.5, 0, 0, 0, 0, 0, 2.5, 0, 0, 5, 0, 3.75, 2.5, 0, 0, 0, 0, 0, 0, 2.5, 0, 105, 0, 3.75, 2.5, 0, 100, 0, 0, 0, 102.5, 100, 0, 0, 100, 103.75, 0, 0, 0, 0), nrow=8,ncol=6)
targets <- c(1000, 1000, 1000, 1000, 1000, 6000, 6000, 6000, 6000)
llgp( coefficients, targets, achievements )
targets <- c( 1000, 1000, 1000, 1000, 6000, 6000, 6000, 6000)
llgp( coefficients, targets, achievements )
library("googlesheets")
library("ggplot2")
library("tseries")
library("forecast")
suppressPackageStartupMessages(library("dplyr"))
#get the data
dati <- gs_title("Furti_serie_storica")
dati <- gs_read(dati)
#clean in order to take just the regions
dati <- dati[,1:23]
datits <- ts(dati [2:23], start = as.numeric(dati[1,1]), end = as.numeric(dati[length(dati[1,]),1]), frequency = 1)
autoplot(datits)
View(dati)
p + labs(x="Time", y = "Potential loss", fill="Series")
p <- autoplot(datits)
p + labs(x="Time", y = "Potential loss", fill="Series")
p <- autoplot(datits)
p + labs(x="Time", y = "Value per 100.000 inhabitants", legend="Series")
p <- autoplot(datits) +
labs(x="Time", y = "Value per 100.000 inhabitants")
p <- autoplot(datits) +
labs(x="Time", y = "Value per 100.000 inhabitants")
p
autoplot(datits) +
labs(x="Time", y = "Value per 100.000 inhabitants", fill="Prova")
autoplot(datits) +
labs(x="Time", y = "Value per 100.000 inhabitants", series="Prova")
autoplot(datits) +
labs(x="Time", y = "Value per 100.000 inhabitants", colour ="Prova")
autoplot(datits) +
labs(x="Time", y = "Value per 100.000 inhabitants", colour ="Series")
#get the data
dati <- gs_title("Furti_serie_storica")
dati <- gs_read(dati)
View(dati)
#clean in order to take just the regions
dati <- dati[,29]
datits <- ts(dati, start = as.numeric(dati[1,1]), end = as.numeric(dati[length(dati[1,]),1]), frequency = 1)
View(dati)
autoplot(dati)
autoplot(datits)
datits <- ts(dati[29], start = as.numeric(dati[1,1]), end = as.numeric(dati[length(dati[1,]),1]), frequency = 1)
datits <- ts(dati[1], start = as.numeric(dati[1,1]), end = as.numeric(dati[length(dati[1,]),1]), frequency = 1)
autoplot(datits)
#clean in order to take just the regions
dati <- dati[,29]
View(dati)
datits <- ts(dati[2], start = as.numeric(dati[1,1]), end = as.numeric(dati[length(dati[1,]),1]), frequency = 1)
tsplot(datits)
ts.plot(datits)
datits
#get the data
dati <- gs_title("Furti_serie_storica")
dati <- gs_read(dati)
#clean in order to take just the regions
dati <- dati[,29]
View(dati)
dati[1,1]
dati[0,1]
#get the data
dati <- gs_title("Furti_serie_storica")
dati <- gs_read(dati)
dati[,29]
View(dati)
#clean in order to take just the regions
dati <- subset(dati, select=c("i", "Italia"))
datits <- ts(dati[2], start = as.numeric(dati[1,1]), end = as.numeric(dati[length(dati[1,]),1]), frequency = 1)
autoplot(datits)
View(dati)
View(datits)
datits <- ts(dati, start = as.numeric(dati[1,1]), end = as.numeric(dati[length(dati[1,]),1]), frequency = 1)
View(datits)
dati[1,1]
as.numeric(dati[1,1])
as.numeric(dati[length(dati[1,]),1])
length(dati[1,])
dati[1,]
View(dati)
length(dati[,1])
length(dati[1,])
length(dati)
length(dati$i)
length(dati$i),1
as.numeric(dati[length(dati$i),1])
datits <- ts(dati, start = as.numeric(dati[1,1]), end = as.numeric(dati[length(dati$i),1]), frequency = 1)
autoplot(datits)
datits <- ts(dati[2], start = as.numeric(dati[1,1]), end = as.numeric(dati[length(dati$i),1]), frequency = 1)
autoplot(datits)
fit <- auto.arima(datits)
autoplot(datits) +
geom_line(data=fit)
autoplot(datits) +
autoplot(fit)
autoplot(datits) +
plot(fit)
summary(fit)
foreca <- forecast(fit, h=9)
autoplot(foreca)
foreca <- forecast(fit, h=7)
autoplot(foreca)
autoplot(foreca) +
labs(x="Time", y = "Value per 100.000 inhabitants", colour ="Confidence level", title = "Forecasts from ARIMA(2,0,0)")
library(devtools)
install_github("pdfHarvester", "hansthompson")
library(pdfHarvester)
library(pdfHarvester)
directory <- "/Users/marcorepetto/Desktop/schermata.png"
convert(directory, "-density 300", "-sharpen 0x1.0", "convert1")
install_github("pdfHarvester")
install_github("pdfHarvester", "hansthompson")
install_github("/hansthompson/pdfHarvester")
install_github("hansthompson/pdfHarvester")
install_github("hansthompson/pdfHarvester", force = TRUE)
library(pdfHarvester)
Convert(directory, "-density 300", "-sharpen 0x1.0", "convert1")
Parse_Tables(directory)
install.packages(c("png", "plyr", "stringr", "RJSONIO", "devtools", "xlsx"))
install.packages(c("png", "plyr", "stringr", "RJSONIO", "devtools", "xlsx"))
install_github("hansthompson/pdfHarvester", force = TRUE)
library(devtools)
install_github("hansthompson/pdfHarvester", force = TRUE)
library(pdfHarvester)
directory <- "/Users/marcorepetto/Desktop/tesse"
Convert(directory, "-density 300", "-sharpen 0x1.0", "convert1")
library(stringr)
Convert(directory, "-density 300", "-sharpen 0x1.0", "convert1")
directory <- "/Users/marcorepetto/Desktop/tesse/schermata.png"
Convert(directory, "-density 300", "-sharpen 0x1.0", "convert1")
directory <- "/Users/marcorepetto/Desktop/tesse"
Convert(directory, "-density 300", "-sharpen 0x1.0", "convert1")
Tesseract(directory)
Transcribe(directory)
library(png)
Convert(directory, "-density 300", "-sharpen 0x1.0", "schermata")
library(tesseract)
install.packages(tesseract)
install.packages("tesseract")
library(tesseract)
text <- ocr("https://jeroen.github.io/images/testocr.png")
cat(text)
tesseract_download(ita)
tesseract_download("ita")
text <- ocr(directory)
directory <- "/Users/marcorepetto/Desktop/tesse/schermata.png"
text <- ocr(directory)
cat(text)
text <- ocr(directory,  engine = tesseract("ita"))
cat(text)
directory <- "/Users/marcorepetto/Desktop/sicurezza.pdf"
text <- ocr(directory,  engine = tesseract("ita"))
library(tesseract)
library(pdftools)
library(tiff)
install.packages(tiff)
install.packages("tiff"")
install.packages("tiff")
install.packages("pdftools")
library(tesseract)
library(pdftools)
library(tiff)
directory <- "/Users/marcorepetto/Desktop"
# A PDF file with some text
news <- file.path(Sys.getenv(directory), "sicurezza.pdf")
orig <- pdf_text(news)[1]
directory <- "/Users/marcorepetto/Desktop/"
# A PDF file with some text
news <- file.path(Sys.getenv(directory), "sicurezza.pdf")
orig <- pdf_text(news)[1]
directory <- "/Users/marcorepetto/Desktop/sicurezza.pdf"
orig <- pdf_text(directory)[1]
# Render pdf to jpeg/tiff image
bitmap <- pdf_render_page(directory, dpi = 300)
tiff::writeTIFF(bitmap, "page.tiff")
writeTIFF(bitmap, "page.tiff")
# Extract text from images
out <- ocr("page.tiff")
cat(out)
origin
orig
library("googlesheets")
library("ggplot2")
library("tseries")
library("forecast")
suppressPackageStartupMessages(library("dplyr"))
#get the data
dati <- gs_title("Sicurezza_treni")
dati <- gs_read(dati)
autoplot(dati)
plot(dati)
ts.plot(dati)
dati[1,1
]
datits <- ts(dati [2:5], start = as.numeric(dati[1,1]), end = as.numeric(dati[length(dati[1,]),1]), frequency = 1)
autoplot(datits)
autoplot(datits) +
labs(x="Time", y = "Death accident", colour ="Series")
library("googlesheets")
library("ggplot2")
library("tseries")
library("forecast")
suppressPackageStartupMessages(library("dplyr"))
#get the data
dati <- gs_title("Furti_serie_storica")
dati <- gs_read(dati)
#get the data
dati <- gs_title("Sicurezza_treni")
dati <- gs_read(dati)
datits <- ts(dati [2:5], start = as.numeric(dati[1,1]), end = as.numeric(dati[length(dati[1,]),1]), frequency = 1)
autoplot(datits) +
labs(x="Time", y = "Death accident", colour ="Series")
setwd("~/Documents/DynamicEcon/script")
#This script return the symbol of NASDAQ listed companies
#load the necessary libraries
require(RCurl)
#searching for the NASDAQ listed companies
txt=getURL("ftp://nasdaqtrader.com/SymbolDirectory/Nasdaqlisted.txt", ssl.verifypeer = FALSE)
#create a data frame out of that
listdata = read.table(textConnection(txt), header = TRUE, sep = "|", dec = "\n" )
#take only the common stocks
#for cycle
liststock <- listdata[,1]
n <- grep("Common Stock", listdata$Security.Name)
liststock <- liststock[n]
#create an array of symbols
symbols = as.character(liststock)
#eliminate the last element (data update blah)
symbols <- head(symbols, -2)
write.table(symbols, file = "listedCS.csv", sep = ";")
R.home()
help("Startup")
Sys.env(Alpha_key)
Sys.getenv(Alpha_key)
Sys.getenv("Alpha_key")
av_api_key(Sys.getenv("Alpha_key"))
require(alphavantager)
av_api_key(Sys.getenv("Alpha_key"))
#main script
#main script
require(alphavantager)
av_api_key(Sys.getenv("Alpha_key"))
set.seed(60)
readSym <- function(sym) {
out <- tryCatch(
{
x <- av_get(symbol = sym, av_fun = "TIME_SERIES_INTRADAY", interval = "1min")
if(length(x$close) == 100){
return(x$close)
}else{
return(NA)
}
},
error=function(cond) {
message(paste("URL does not seem to exist:", sym))
return(NA)
},
warning=function(cond) {
message(paste("URL caused a warning:", sym))
return(NA)
},
finally={
message(paste("Processed URL:", sym))
}
)
return(out)
}
list <- read.table("listedCS.csv", sep = ";")
list <- as.character(list[,1])
#just to let the first warning go away
f <- av_get(symbol = list[1], av_fun = "TIME_SERIES_INTRADAY", interval = "1min")
list <- sample(list, 34)
stock <- sapply(list, readSym)
stock <-as.data.frame(stock)
stock <- stock[colSums(!is.na(stock)) > 0]
write.table(stock, file = "stock.csv", dec=",", sep = ";", row.names = FALSE)
library("ggplot2")
autoplot(stock)
library(ts)
library(timeseries)
library(tseries)
ts(stock)
autoplot(ts(stock))
tsstock<-ts(stock)
autoplot(tsstock
)
ts.plot(stock)
View(stock)
stock/lag(stock,-1) - 1
tsstock/lag(tsstock,-1) - 1
tsstock<-tsstock/lag(tsstock,-1) - 1
autoplot(tsstock)
View(tsstock)
ggplot(tsstock, aes(Date, ))
plot(tssstock)
plot(tsstock)
ts.plot(tsstock)
ts.plot(tsstock[1,])
ts.plot(tsstock[,1])
hist(tsstock[,1])
ts.plot(stock[,1])
ts.plot(exp(ln(stock[,1])-ln(lag(stock[,1],-1))))
ts.plot(exp(log(stock[,1])-log(lag(stock[,1],-1))))
exp(log(stock[,1])-log(lag(stock[,1],-1)))
log(stock[,1])-log(lag(stock[,1],-1))
stock[,1]-lag(stock[,1],-1)
plot(tsstock[1:10,])
plot(tsstock[,1:10])
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
autoplot(tsstock)
autoplot(tsstock[,1])
autoplot(tsstock[,1:4])
#ts transformation
tsstock <- ts(stock)
sample(1:30, 3)
#plot of three samples
autoplot(tsstock[1:30,sample(1:30, 3)])
tsstock[1:30,sample(1:30, 3)]
#plot of three samples
autoplot(tsstock[1:30,sample(1:30, 3)])
View(tsstock)
View(tsstock)
#ts transformation
tsstock <- ts(stock)
View(tsstock)
#plot of three samples
autoplot(stock[1:30,sample(1:30, 3)])
#ts transformation
tsstock <- ts(stock)
View(stock)
View(tsstock)
#plot of three samples
autoplot(tsstock[1:60,1])
#plot of three samples
autoplot(tsstock[,1])
#plot of three samples
autoplot(tsstock[,1:3])
#plot of three samples
autoplot(tsstock[1:3,1:3])
#ts transformation
tsstock <- ts(stock[1:60])
#ts transformation
tsstock <- ts(stock[1:60,])
#plot of three samples
autoplot(tsstock[,1:3])
#ts transformation
tsstock <- ts(stock[1:60,])
#plot of three samples
autoplot(tsstock[,sample(1:30, 3)])
#plot of three samples
autoplot(tsstock[,sample(1:30, 3)])
#plot of three samples
autoplot(tsstock[,sample(1:30, 3)])
set.seed(60)
#plot of three samples
autoplot(tsstock[,sample(1:30, 3)])
