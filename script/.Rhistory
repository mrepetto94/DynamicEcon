errortrim <- error[-c(1),]
#this script builds the arima models for the stocks provided by the stock.csv
library(forecast)
library(tseries)
stock <- read.table("stock.csv", dec = ",", sep = ";", header = 1)
#list <- colnames(stock)
#divide in training set and test set
train <- ts(stock[1:99,])
test <- ts(stock[99:100,], start = 99, end = 100)
l <- length(stock[1,])
fit <- lapply(train, auto.arima)
foreca <- lapply(fit, h = 5, level = 95, forecast)
fitted <- lapply(fit, fitted)
i <- 1
error <- train * 0
for (i in 1:l) {
error [,i] <- fitted [[i]] - train [,i]
}
write.table(error, file = "error.csv", dec=",", sep = ";", row.names = FALSE)
#this script creates a neural net that tryies to interpret the error of the arima model given the lagged value of the stocks analyzed
library(neuralnet)
stock <- read.table("stock.csv", dec = ",", sep = ";", header = 1)
error <- read.table("error.csv", dec = ",", sep = ";", header = 1)
#get out the first error element
errortrim <- error[-c(1),]
errortrim <- scale(errortrim)
#get out the first error element
errortrim <- error[-c(1),]
stockscaled <- scale(stock)
plot(stockscaled[1:10,])
plot(stockscaled[,1:10])
plot(stockscaled[1:10])
plot(stockscaled)
View(stockscaled)
ts.plot(stockscaled$PTI)
names(stockscaled)
summary(stockscaled)
coll(stockscaled)
col(stockscaled)
stock <- read.table("stock.csv", dec = ",", sep = ";", header = 1)
error <- read.table("error.csv", dec = ",", sep = ";", header = 1)
#get out the first error element
errortrim <- error[-c(1),]
stockscaled <-as.data.frame(scale(stock))
plot(stockscaled$PTI)
ts.plot(stockscaled$PTI)
train <- stockscaled[1:98,]
n <- names(train)
#try to train a nnet on the first stock error using the prices of the other
y <- n[1] + "~"
#try to train a nnet on the first stock error using the prices of the other
y <- as.string(n[1]) + "~"
#try to train a nnet on the first stock error using the prices of the other
y <- as.character(n[1]) + "~"
n[1]
#try to train a nnet on the first stock error using the prices of the other
y <- n[1]+"~"
#try to train a nnet on the first stock error using the prices of the other
y <- as.character(n[1] + "~")
#try to train a nnet on the first stock error using the prices of the other
y <- paste(n[1], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[1]], collapse = " + ")))
nn <- neuralnet(f,data=train,hidden=c(18,12),linear.output=T)
plot(nn)
#try to predict it
compute(nn,stockscaled[,99:100])
#try to predict it
stockscaled[,99:100])
#try to predict it
stockscaled[,99:100]
#try to predict it
stockscaled[99:100,]
#try to predict it
stockscaled[,100]
View(stockscaled)
#try to predict it
stockscaled[100,]
#try to predict it
compute(nn,stockscaled[100,])
#try to predict it
compute(nn,stockscaled[100,2:26])
#try to predict it
compute(nn,stockscaled[99,2:26])
plot(stock$PTI[70:80,])
plot(stock$PTI[,80:100])
plot(stock$PTI[80:100])
ts.plot(stock$PTI[80:100])
ts.plot(stock$PTI[90:100])
lines(fitted$PTI[90:100])
lines(fitted$PTI[90:100], col = "red")
figure
figure()
ts.plot(stock$PTI[90:100])
ts.plot(stock$PTI[95:100])
ts.plot(stock$PTI[98:100])
lines(fitted$PTI[90:100], col = "red")
ts.plot(stock$PTI[98:100])
lines(fitted$PTI[98:100], col = "red")
#try to predict it
lines(compute(nn,stockscaled[99,2:26]))
#try to predict it
points(3,compute(nn,stockscaled[99,2:26]))
#try to predict it
points(3,compute(nn,stockscaled[99,2:26])$net.results)
#try to predict it
compute(nn,stockscaled[,99:100])
stock$PTI[98:100]
#try to predict it
compute(nn,stockscaled[,100])
#try to predict it
compute(nn,stockscaled[100,])
#try to predict it
compute(nn,stockscaled[100])
#try to predict it
compute(nn,stockscaled[100, 2:26])
#try to predict it
compute(nn,stockscaled[99, 2:26])
nn <- neuralnet(f,data=train,hidden=c(18,12,8,5),linear.output=T)
#try to predict it
compute(nn,stockscaled[,99:100])
#try to predict it
compute(nn,stockscaled[2:26,99])
#try to predict it
compute(nn,stockscaled[99, 2:26])
nn <- neuralnet(f,data=train,hidden=c(18,8,18),linear.output=T)
#try to predict it
compute(nn,stockscaled[99, 2:26])
nn <- neuralnet(f,data=train,hidden=c(18,8),linear.output=T)
#try to predict it
compute(nn,stockscaled[99, 2:26])
nn <- neuralnet(f,data=train,hidden=c(18),linear.output=T)
#try to predict it
compute(nn,stockscaled[99, 2:26])
nn <- neuralnet(f,data=train,hidden=c(10,5),linear.output=T)
#try to predict it
compute(nn,stockscaled[99, 2:26])
nn <- neuralnet(f,data=train,hidden=c(16),linear.output=T)
#try to predict it
compute(nn,stockscaled[99, 2:26])
len(stock)
length(stock)
for (i in 1:length(stock)){
y <- paste(n[i], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[1]], collapse = " + ")))
nn <- neuralnet(f,data=train,hidden=c(16),linear.output=T)
}
i <- 0
n <- names(train)
#try to train a nnet on the first stock error using the prices of the other
for (i in 1:length(stock)){
y <- paste(n[i], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[i]], collapse = " + ")))
nn <- neuralnet(f,data=train,hidden=c(16),linear.output=T)
}
stock[1]
stock[0]
i <- 0
n <- names(train)
#try to train a nnet on the first stock error using the prices of the other
for (i in 1:length(stock)){
y <- paste(n[i], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[i]], collapse = " + ")))
nn[i]<- neuralnet(f,data=train,hidden=c(16),linear.output=T)
}
nn <- list()
i <- 0
for (i in 1:length(stock)){
y <- paste(n[i], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[i]], collapse = " + ")))
nn[i]<- neuralnet(f,data=train,hidden=c(16),linear.output=T)
}
train <- stockscaled[1:98,]
i <- 0
n <- names(train)
nn <- list()
for (i in 1:length(stock)){
y <- paste(n[i], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[i]], collapse = " + ")))
nn[[i]]<- neuralnet(f,data=train,hidden=c(16),linear.output=T)
}
View(nn)
nn[[1]]
summary(nn)
i <- 0
n <- names(train)
nn <- list()
#try to train a nnet on the first stock error using the prices of the other
for (i in 1:length(stock)){
y <- paste(n[i], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[i]], collapse = " + ")))
nn[i]<-n[i]
nn[[i]]<- neuralnet(f,data=train,hidden=c(16),linear.output=T)
}
summary(nn)
View(nn)
nn[[1]]
nn[1]
nn[0,1]
nn[1,1]
nn[1]
nn[,1]
nn[1,]
nn[0]
train <- stockscaled[1:98,]
i <- 0
n <- names(train)
nn <- list()
#try to train a nnet on the first stock error using the prices of the other
for (i in 1:length(stock)){
y <- paste(n[i], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[i]], collapse = " + ")))
nn[i]<- neuralnet(f,data=train,hidden=c(16),linear.output=T)
}
warnings()
nn[1]
nn[[1]]
train <- stockscaled[1:98,]
i <- 0
n <- names(train)
nn <- list()
#try to train a nnet on the first stock error using the prices of the other
for (i in 1:length(stock)){
y <- paste(n[i], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[i]], collapse = " + ")))
nn[[i]]<- neuralnet(f,data=train,hidden=c(16),linear.output=T)
}
#try to predict it
compute(nn,stockscaled[99, 2:26])
names(nn)
names(nn) <- names(stock)
compute(nn[[1]],stockscaled[99, 2:26])
compute(nn[[1]],stockscaled[99, 2:26])$net.result
i <- 0
#try to predict it
for (i in 1:length(stock)){
perrors <- compute(nn[[i]],stockscaled[99, -c(i)])$net.result
}
View(perrors)
View(perrors)
i <- 0
#try to predict it
for (i in 1:length(stock)){
perrors[i] <- compute(nn[[i]],stockscaled[99, -c(i)])$net.result
}
perrors
stockscaled[99, -c(i)]
stockscaled[99, -c(1)]
stockscaled[99, -c(2)]
perrors
compute(nn[[i]],stockscaled[99, -c(1)])$net.result
compute(nn[[i]],stockscaled[99, 2:26])$net.result
compute(nn[[i]],stockscaled[99, 1:26])$net.result
i <- 0
#try to predict it
for (i in 1:length(stock)){
perrors[i] <- as.data.frame(compute(nn[[i]],stockscaled[99, -c(i)])$net.result)
}
names(perrors) <- names(stock)
#this script builds the arima models for the stocks provided by the stock.csv
library(forecast)
library(tseries)
stock <- read.table("stock.csv", dec = ",", sep = ";", header = 1)
#list <- colnames(stock)
#divide in training set and test set
train <- ts(stock[1:99,])
test <- ts(stock[99:100,], start = 99, end = 100)
l <- length(stock[1,])
fit <- lapply(train, auto.arima)
foreca <- lapply(fit, h = 1, level = 95, forecast)
fitted <- lapply(fit, fitted)
i <- 1
error <- train * 0
for (i in 1:l) {
error [,i] <- fitted [[i]] - train [,i]
}
write.table(error, file = "error.csv", dec=",", sep = ";", row.names = FALSE)
write.table(error, file = "foreca.csv", dec=",", sep = ";", row.names = FALSE)
#this script builds the arima models for the stocks provided by the stock.csv
library(forecast)
library(tseries)
stock <- read.table("stock.csv", dec = ",", sep = ";", header = 1)
#list <- colnames(stock)
#divide in training set and test set
train <- ts(stock[1:99,])
test <- ts(stock[99:100,], start = 99, end = 100)
l <- length(stock[1,])
fit <- lapply(train, auto.arima)
foreca <- lapply(fit, h = 1, level = 95, forecast)
fitted <- lapply(fit, fitted)
i <- 1
error <- train * 0
for (i in 1:l) {
error [,i] <- fitted [[i]] - train [,i]
}
write.table(error, file = "error.csv", dec=",", sep = ";", row.names = FALSE)
write.table(foreca, file = "foreca.csv", dec=",", sep = ";", row.names = FALSE)
#this script creates a neural net that tryies to interpret the error of the arima model given the lagged value of the stocks analyzed
library(neuralnet)
stock <- read.table("stock.csv", dec = ",", sep = ";", header = 1)
error <- read.table("error.csv", dec = ",", sep = ";", header = 1)
foreca <- read.table("foreca.csv", dec = ",", sep = ";", header = 1)
#get out the first error element
errortrim <- error[-c(1),]
#get a normalized dataframe of the stock price
stockscaled <-as.data.frame(scale(stock))
train <- stockscaled[1:98,]
i <- 0
n <- names(train)
nn <- list()
#try to train a nnet on the stock's error using the prices of the others
for (i in 1:length(stock)){
y <- paste(n[i], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[i]], collapse = " + ")))
nn[[i]]<- neuralnet(f,data=train,hidden=c(16),linear.output=T)
}
names(nn) <- names(stock)
i <- 0
#try to predict it
for (i in 1:length(stock)){
perrors[i] <- as.data.frame(compute(nn[[i]],stockscaled[99, -c(i)])$net.result)
}
names(perrors) <- names(stock)
foreca <- foreca + perrors
write.table(error, file = "foreca.csv", dec=",", sep = ";", row.names = FALSE)
#this script builds the arima models for the stocks provided by the stock.csv
library(forecast)
library(tseries)
stock <- read.table("stock.csv", dec = ",", sep = ";", header = 1)
#list <- colnames(stock)
#divide in training set and test set
train <- ts(stock[1:99,])
test <- ts(stock[99:100,], start = 99, end = 100)
l <- length(stock[1,])
fit <- lapply(train, auto.arima)
foreca <- lapply(fit, h = 1, level = 95, forecast)
fitted <- lapply(fit, fitted)
i <- 1
error <- train * 0
for (i in 1:l) {
error [,i] <- fitted [[i]] - train [,i]
}
write.table(error, file = "error.csv", dec=",", sep = ";", row.names = FALSE)
write.table(foreca, file = "foreca.csv", dec=",", sep = ";", row.names = FALSE)
summary(foreca)
summary(foreca$PTI)
foreca$PTI
foreca[1]
foreca[1,1]
foreca[[1]]
foreca[[1,1]]
foreca[[1]][[1]]
foreca[[1]][[2]]
foreca[[1]][[3]]
foreca[[1]][3]
foreca[[1]][1]
foreca[[1]][5]
foreca[[1]][6]
foreca[[1]][10]
foreca[[1]]
summary(foreca[[1]])
foreca[[1]][5]
foreca[[1]][4]
foreca[[1]][4][1]
foreca[[1]]$mean
foreca[[1]]$mean[1]
prova <- lapply(foreca,mean)
foreca <- lapply(fit, h = 1, level = 95, forecast$mean)
foreca$mean
i <- 1
error <- train * 0
for (i in 1:l) {
error [,i] <- fitted [[i]] - train [,i]
foreca[i]<-foreca[[i]]$mean[i]
}
foreca <- lapply(fit, h = 1, level = 95, forecast)
i <- 1
error <- train * 0
for (i in 1:l) {
error [,i] <- fitted [[i]] - train [,i]
foreca[i] <- foreca[[i]]$mean[i]
}
foreca <- lapply(fit, h = 1, level = 95, forecast)
i <- 1
error <- train * 0
for (i in 1:l) {
error [,i] <- fitted [[i]] - train [,i]
foreca[i] <- foreca[[i]]$mean[1]
}
write.table(error, file = "error.csv", dec=",", sep = ";", row.names = FALSE)
write.table(foreca, file = "foreca.csv", dec=",", sep = ";", row.names = FALSE)
#this script creates a neural net that tryies to interpret the error of the arima model given the lagged value of the stocks analyzed
library(neuralnet)
stock <- read.table("stock.csv", dec = ",", sep = ";", header = 1)
error <- read.table("error.csv", dec = ",", sep = ";", header = 1)
foreca <- read.table("foreca.csv", dec = ",", sep = ";", header = 1)
#get out the first error element
errortrim <- error[-c(1),]
#get a normalized dataframe of the stock price
stockscaled <-as.data.frame(scale(stock))
train <- stockscaled[1:98,]
i <- 0
n <- names(train)
nn <- list()
#try to train a nnet on the stock's error using the prices of the others
for (i in 1:length(stock)){
y <- paste(n[i], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[i]], collapse = " + ")))
nn[[i]]<- neuralnet(f,data=train,hidden=c(16),linear.output=T)
}
names(nn) <- names(stock)
i <- 0
#try to predict it
for (i in 1:length(stock)){
perrors[i] <- as.data.frame(compute(nn[[i]],stockscaled[99, -c(i)])$net.result)
}
names(perrors) <- names(stock)
foreca <- foreca + perrors
write.table(error, file = "foreca.csv", dec=",", sep = ";", row.names = FALSE)
#this script builds the arima models for the stocks provided by the stock.csv
library(forecast)
library(tseries)
stock <- read.table("stock.csv", dec = ",", sep = ";", header = 1)
#list <- colnames(stock)
#divide in training set and test set
train <- ts(stock[1:99,])
test <- ts(stock[99:100,], start = 99, end = 100)
l <- length(stock[1,])
fit <- lapply(train, auto.arima)
foreca <- lapply(fit, h = 1, level = 95, forecast)
fitted <- lapply(fit, fitted)
i <- 1
error <- train * 0
for (i in 1:l) {
error [,i] <- fitted [[i]] - train [,i]
foreca[i] <- foreca[[i]]$mean[1]
}
write.table(error, file = "error.csv", dec=",", sep = ";", row.names = FALSE)
write.table(foreca, file = "foreca.csv", dec=",", sep = ";", row.names = FALSE)
foreca <- as.data.frame(foreca)
write.table(foreca, file = "foreca.csv", dec=",", sep = ";", row.names = FALSE)
View(foreca)
View(foreca)
#this script builds the arima models for the stocks provided by the stock.csv
library(forecast)
library(tseries)
stock <- read.table("stock.csv", dec = ",", sep = ";", header = 1)
#list <- colnames(stock)
#divide in training set and test set
train <- ts(stock[1:99,])
test <- ts(stock[99:100,], start = 99, end = 100)
l <- length(stock[1,])
fit <- lapply(train, auto.arima)
foreca <- lapply(fit, h = 1, level = 95, forecast)
fitted <- lapply(fit, fitted)
i <- 1
error <- train * 0
for (i in 1:l) {
error [,i] <- fitted [[i]] - train [,i]
foreca[i] <- foreca[[i]]$mean[1]
}
foreca <- as.data.frame(foreca)
write.table(error, file = "error.csv", dec=",", sep = ";", row.names = FALSE)
write.table(foreca, file = "foreca.csv", dec=",", sep = ";", row.names = FALSE)
#this script creates a neural net that tryies to interpret the error of the arima model given the lagged value of the stocks analyzed
library(neuralnet)
stock <- read.table("stock.csv", dec = ",", sep = ";", header = 1)
error <- read.table("error.csv", dec = ",", sep = ";", header = 1)
foreca <- read.table("foreca.csv", dec = ",", sep = ";", header = 1)
#get out the first error element
errortrim <- error[-c(1),]
#get a normalized dataframe of the stock price
stockscaled <-as.data.frame(scale(stock))
train <- stockscaled[1:98,]
i <- 0
n <- names(train)
nn <- list()
#try to train a nnet on the stock's error using the prices of the others
for (i in 1:length(stock)){
y <- paste(n[i], "~")
f <- as.formula(paste(y, paste(n[!n %in% n[i]], collapse = " + ")))
nn[[i]]<- neuralnet(f,data=train,hidden=c(16),linear.output=T)
}
names(nn) <- names(stock)
i <- 0
#try to predict it
for (i in 1:length(stock)){
perrors[i] <- as.data.frame(compute(nn[[i]],stockscaled[99, -c(i)])$net.result)
}
names(perrors) <- names(stock)
foreca1 <- foreca + perrors
write.table(foreca1, file = "foreca.csv", dec=",", sep = ";", row.names = FALSE)
stock[,99]
stock[99,]
foreca1 <- foreca1 - stock[99,]
View(foreca1)
apply(foreca1, function(x) {ifelse(any(x <= 0), 0, 1))})
apply(foreca1, function(x) {ifelse(any(x <= 0), 0, 1))}
apply(foreca1, function(x) {ifelse(any(x <= 0), 0, 1)})
apply(foreca1, function(x){ifelse(any(x <= 0), 0, 1)})
apply(foreca1, 1, function(x){ifelse(any(x <= 0), 0, 1)})
apply(foreca1, 2, function(x){ifelse(any(x <= 0), 0, 1)})
strategy <- apply(foreca1, 2, function(x){ifelse(any(x <= 0), 0, 1)})
write.table(strategy, file = "strategy.csv", dec=",", sep = ";", row.names = FALSE)
summary(strategy)
strategy
as.data.frame(strategy)
length(strategy)
#add the naive strategy
naive <- sample(c(0,1), replace=TRUE, size=length(strategy))
cbind(strategy,naive)
strategy <- cbind(strategy,naive)
write.table(strategy, file = "strategy.csv", dec=",", sep = ";", row.names = FALSE)
